npm install @chakra-ui/react @emotion/react @emotion/styled framer-motion
npm install react-router-dom
npm install zustand
npm install zustand
npm install @tanstack/react-query
npm install axios
npm install react-icons
npm install @supabase/supabase-js



npm install react-hook-form

Total Fase Pengembangan
Fase 1: Fondasi & CRUD Inti (MVP)

Fokus pada penyiapan proyek, layout, dan fungsi dasar untuk mengelola data inti seperti bahan baku dan produk.

Fase 2: Logika Inti - Resep & Penjualan

Fokus pada fitur kunci yang menghubungkan penjualan dengan inventaris, yaitu manajemen resep dan proses transaksi di kasir.

Fase 3: Manajemen Supplier & Pembelian

Fokus pada alur pengadaan barang, mulai dari pengelolaan data supplier hingga pembuatan Purchase Order (PO).

Fase 4: Analitik & Fitur Lanjutan

Fokus pada fitur-fitur pendukung untuk pengambilan keputusan dan efisiensi operasional, seperti dasbor, KDS, dan notifikasi.





npm install supabase --save-dev
npx supabase login

npx supabase link --project-ref ID_PROYEK_ANDA

npx supabase functions new proses-pesanan


// supabase/functions/proses-pesanan/index.ts
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { corsHeaders } from '../_shared/cors.ts';

// Definisikan tipe data yang diterima dari frontend
interface CartItem {
  id: number;
  harga_jual: number;
  quantity: number;
}

Deno.serve(async (req) => {
  // Tangani preflight request untuk CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { cartItems }: { cartItems: CartItem[] } = await req.json();
    if (!cartItems || cartItems.length === 0) {
      throw new Error("Keranjang belanja kosong.");
    }

    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );

    // --- Mulai Transaksi ---
    // 1. Hitung total & buat nomor pesanan
    const totalHarga = cartItems.reduce((sum, item) => sum + item.harga_jual * item.quantity, 0);
    const nomorPesanan = `GOURMET-${new Date().getTime()}`;

    // 2. Buat entri di tabel Pesanan
    const { data: pesanan, error: pesananError } = await supabaseAdmin
      .from('Pesanan')
      .insert({ total_harga: totalHarga, nomor_pesanan: nomorPesanan, status: 'DIBAYAR' })
      .select()
      .single();

    if (pesananError) throw pesananError;

    // 3. Siapkan data untuk DetailPesanan
    const detailPesananData = cartItems.map(item => ({
      pesanan_id: pesanan.id,
      produk_jadi_id: item.id,
      jumlah: item.quantity,
      subtotal: item.harga_jual * item.quantity,
    }));

    const { error: detailError } = await supabaseAdmin.from('DetailPesanan').insert(detailPesananData);
    if (detailError) throw detailError;

    // 4. Proses pemotongan stok
    for (const item of cartItems) {
      // Ambil resep untuk produk ini
      const { data: resepItems, error: resepError } = await supabaseAdmin
        .from('Resep')
        .select('*')
        .eq('produk_jadi_id', item.id);

      if (resepError) throw resepError;

      // Loop melalui setiap bahan di resep dan kurangi stok
      for (const resep of resepItems) {
        const jumlahDipotong = resep.jumlah_pemakaian * item.quantity;

        // Panggil RPC function untuk mengurangi stok secara aman
        const { error: rpcError } = await supabaseAdmin.rpc('kurangi_stok_bahan', {
          id_bahan: resep.bahan_baku_id,
          jumlah_dikurangi: jumlahDipotong
        });

        if (rpcError) {
          // Jika ada error (misal: stok tidak cukup), throw error
          throw new Error(`Stok untuk bahan ID ${resep.bahan_baku_id} tidak mencukupi.`);
        }
      }
    }

    return new Response(JSON.stringify({ pesananId: pesanan.id }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
});

npx supabase functions deploy proses-pesanan --no-verify-jwt










npx supabase functions new create-purchase-order
// supabase/functions/create-purchase-order/index.ts
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { corsHeaders } from '../_shared/cors.ts'

interface PoItem {
  bahan_baku_id: number;
  jumlah_dipesan: number;
  harga_beli_per_unit: number;
}

interface PoPayload {
  supplier_id: number;
  tanggal_po: string;
  items: PoItem[];
}

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { supplier_id, tanggal_po, items }: PoPayload = await req.json();
    if (!supplier_id || !items || items.length === 0) {
      throw new Error("Data PO tidak lengkap.");
    }

    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );

    // 1. Hitung total harga
    const total_harga_beli = items.reduce((sum, item) => sum + (item.jumlah_dipesan * item.harga_beli_per_unit), 0);

    // 2. Buat entri di tabel PurchaseOrder
    const { data: po, error: poError } = await supabaseAdmin
      .from('PurchaseOrder')
      .insert({
        supplier_id,
        tanggal_po,
        total_harga_beli,
        status: 'DIPESAN',
      })
      .select()
      .single();

    if (poError) throw poError;

    // 3. Siapkan dan masukkan detail PO
    const detailPoData = items.map(item => ({
      po_id: po.id,
      ...item,
    }));

    const { error: detailError } = await supabaseAdmin
      .from('DetailPurchaseOrder')
      .insert(detailPoData);

    if (detailError) throw detailError;

    return new Response(JSON.stringify({ poId: po.id }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
})

npx supabase functions deploy create-purchase-order --no-verify-jwt



npx supabase functions new receive-purchase-order

// supabase/functions/receive-purchase-order/index.ts
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { corsHeaders } from '../_shared/cors.ts'

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { po_id } = await req.json();
    if (!po_id) {
      throw new Error("ID Purchase Order tidak ditemukan.");
    }

    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );

    // Ambil detail PO untuk mendapatkan item-itemnya
    const { data: poDetails, error: detailError } = await supabaseAdmin
      .from('DetailPurchaseOrder')
      .select('*')
      .eq('po_id', po_id);

    if (detailError) throw detailError;

    // Loop melalui setiap item dan update stok bahan baku
    for (const item of poDetails) {
      // Gunakan rpc untuk menambah stok dengan aman (opsional, tapi best practice)
      // Untuk penambahan, bisa juga langsung update
      const { error: stockError } = await supabaseAdmin.rpc('tambah_stok_bahan', {
        id_bahan: item.bahan_baku_id,
        jumlah_ditambah: item.jumlah_dipesan
      });
      if (stockError) throw stockError;
    }

    // Setelah semua stok berhasil diupdate, ubah status PO menjadi "DITERIMA"
    const { data: updatedPo, error: poUpdateError } = await supabaseAdmin
      .from('PurchaseOrder')
      .update({ status: 'DITERIMA' })
      .eq('id', po_id)
      .select()
      .single();

    if (poUpdateError) throw poUpdateError;

    return new Response(JSON.stringify(updatedPo), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
})

npx supabase functions deploy receive-purchase-order --no-verify-jwt


npx supabase functions new calculate-profitability

// supabase/functions/calculate-profitability/index.ts
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { corsHeaders } from '../_shared/cors.ts'

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );

    // 1. Ambil semua produk jadi beserta resepnya
    const { data: products, error: productError } = await supabaseAdmin
      .from('ProdukJadi')
      .select(`
        id,
        nama_produk,
        harga_jual,
        Resep (
          jumlah_pemakaian,
          BahanBaku ( id, unit_pemakaian )
        )
      `);

    if (productError) throw productError;

    const profitabilityReport = [];

    // 2. Loop setiap produk untuk menghitung HPP-nya
    for (const product of products) {
      let hpp = 0;

      if (product.Resep.length > 0) {
        for (const resepItem of product.Resep) {
          // 3. Cari harga beli terakhir untuk bahan baku ini
          const { data: lastPurchase, error: priceError } = await supabaseAdmin
            .from('DetailPurchaseOrder')
            .select('harga_beli_per_unit')
            .eq('bahan_baku_id', resepItem.BahanBaku.id)
            .order('created_at', { ascending: false })
            .limit(1)
            .single();

          const hargaBeli = lastPurchase?.harga_beli_per_unit || 0;
          hpp += resepItem.jumlah_pemakaian * hargaBeli;
        }
      }

      const profit = product.harga_jual - hpp;
      const margin = product.harga_jual > 0 ? (profit / product.harga_jual) * 100 : 0;

      profitabilityReport.push({
        ...product,
        hpp,
        profit,
        margin,
      });
    }

    return new Response(JSON.stringify(profitabilityReport), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
})

npx supabase functions deploy calculate-profitability --no-verify-jwt

npx supabase functions new get-sales-report

// supabase/functions/get-sales-report/index.ts
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { corsHeaders } from '../_shared/cors.ts'

Deno.serve(async (_req) => {
  try {
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );

    // Ambil data penjualan 7 hari terakhir
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

    const { data, error } = await supabaseAdmin
      .from('Pesanan')
      .select('created_at, total_harga')
      .gte('created_at', sevenDaysAgo.toISOString());

    if (error) throw error;

    // Agregasi data per tanggal
    const salesByDay = data.reduce((acc, sale) => {
      const date = new Date(sale.created_at).toISOString().split('T')[0];
      if (!acc[date]) {
        acc[date] = 0;
      }
      acc[date] += sale.total_harga;
      return acc;
    }, {});

    // Ubah format menjadi array untuk grafik
    const report = Object.keys(salesByDay).map(date => ({
      tanggal: new Date(date).toLocaleDateString('id-ID', { weekday: 'short', day: 'numeric', month: 'short' }),
      total_penjualan: salesByDay[date],
    })).sort((a, b) => new Date(a.tanggal) - new Date(b.tanggal));


    return new Response(JSON.stringify(report), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
})

npx supabase functions deploy get-sales-report --no-verify-jwt

npm install recharts